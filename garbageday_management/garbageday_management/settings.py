"""
Django settings for garbageday_management project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOG_DIR = '/var/log/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'bk*+jxwrq(#@jtu*sj_l2964!rho+lh37me&0a%-&ypet@_5lk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['<DOMAIN>','<PUBLIC IP>']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mycalendar.apps.MycalendarConfig',
    'garbageday.apps.GarbagedayConfig',
    'line.apps.LineConfig',
    'widget_tweaks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.custom_logging.CustomAttrMiddleware',
]

ROOT_URLCONF = 'garbageday_management.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'garbageday_management.wsgi.application'



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '<POSTGRES_DB>',
        'USER': '<POSTGRES_USER>',
        'PASSWORD' : '<POSTGRES_PASSWORD>',
        'HOST' : 'db',
        'PORT' : 5432,
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True



#静的ファイル（css,js）配信用のURLを指定する。
STATIC_URL = '/static/'
#プロジェクト内で静的ファイルを保存する場所
# STATICFILES_DIRS =[os.path.join(BASE_DIR,'static')]
#setting.pyにてDEBUG=Falseの時に参照される静的ファイルの保存先。つまり本番用。
#セキュリティの観点からプロジェクト内での静的ファイルの保存先と本番での保存先は違ったほうが良いという理由から、保存先を変更する。
#STATIC_ROOT = '/var/www/プロジェクト名/static' 
# セッションの設定
# STATICFILES_DIRS =[os.path.join(BASE_DIR,'static')]
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
SESSION_COOKIE_AGE = 300 # 5分
#ブラウザを閉じたらセッションは切れるが、個々のブラウザの設定によって違いがでてくる
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # ログ出力フォーマットの設定
    'formatters': {
        'default': {
            'format': '%(asctime)s [%(levelname)s] %(pathname)s:%(lineno)d user=%(user)s %(message)s'
        },
    },
    'filters' : {
        'custom': {
            '()': 'middleware.custom_logging.CustomAttrFilter'
        },
    },
    # ハンドラの設定
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        'file_django': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/django.log',
            'maxBytes': 50000,
            'backupCount':5,
            'filters': ['custom'],            
            'formatter': 'default',
        },
        'file_garbageday': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/garbageday.log',
            'maxBytes': 50000,
            'backupCount':5,
            'filters': ['custom'],
            'formatter': 'default',
        },
        'file_mycalendar': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/mycalendar.log',
            'maxBytes': 50000,
            'backupCount':5,
            'filters': ['custom'],
            'formatter': 'default',
        },
        'file_line': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/line.log',
            'maxBytes': 50000,
            'backupCount':5,
            'filters': ['custom'],
            'formatter': 'default',
        },
    },
    # ロガーの設定
    'loggers': {
        # 自分で追加したアプリケーション全般のログを拾うロガー
        'garbageday': {
            'handlers': ['file_garbageday', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'mycalendar': {
            'handlers': ['file_mycalendar', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'line': {
            'handlers': ['file_line', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django自身が出力するログ全般を拾うロガー
        'django': {
            'handlers': ['file_django', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

